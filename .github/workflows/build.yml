name: Build

on: [push, pull_request]

defaults:
  run:
    shell: bash

jobs:
  build:
    name: ${{ matrix.compiler }}-${{ matrix.version }} ${{ matrix.network }} (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-13, macos-14, macos-15, ubuntu-24.04]
        compiler: [ gfortran ]
        version: [ 13, 14 ]
        network: [ smp ]
        exclude:
          - os: macos-15 # gcc-13 broken on macos-15
            compiler: gfortran
            version: 13
            network: smp
        include:
        # --- flang coverage ---
          - os: macos-13
            compiler: flang
            version: 21
            network: smp
          - os: macos-14
            compiler: flang
            version: 21
            network: smp
          - os: macos-15
            compiler: flang
            version: 21
            network: smp
          - os: ubuntu-24.04
            compiler: flang
            version: latest
            network: smp
            native_multi_image: 1
            FFLAGS: -fcoarray
            # https://hub.docker.com/r/snowstep/llvm/tags
            container: snowstep/llvm:bookworm
          - os: ubuntu-24.04
            compiler: flang
            version: 21
            network: smp
            # https://hub.docker.com/r/phhargrove/llvm-flang/tags
            container: phhargrove/llvm-flang:21.1.0-latest
          - os: ubuntu-24.04
            compiler: flang
            version: 20
            network: smp
            # https://hub.docker.com/r/phhargrove/llvm-flang/tags
            container: phhargrove/llvm-flang:20.1.0-latest
          - os: ubuntu-24.04
            compiler: flang
            version: 19
            network: smp
            FFLAGS: -mmlir -allow-assumed-rank
            # https://hub.docker.com/r/phhargrove/llvm-flang/tags
            container: phhargrove/llvm-flang:19.1.1-latest
#          - os: ubuntu-24.04
#            compiler: flang
#            version: new
#            network: smp
#            container: gmao/llvm-flang:latest
        # --- udp coverage for selected configs ---
          - os: macos-15
            compiler: gfortran
            version: 14
            network: udp
          - os: ubuntu-24.04
            compiler: gfortran
            version: 14
            network: udp
          - os: macos-15
            compiler: flang
            version: 21
            network: udp
          - os: ubuntu-24.04
            compiler: flang
            version: 20
            network: udp
            container: phhargrove/llvm-flang:20.1.0-latest
          - os: ubuntu-24.04
            compiler: flang
            version: 21
            network: udp
            container: phhargrove/llvm-flang:21.1.0-latest
          - os: ubuntu-24.04
            compiler: flang
            version: latest
            network: udp
            native_multi_image: 1
            FFLAGS: -fcoarray
            container: snowstep/llvm:bookworm

    container:
      image: ${{ matrix.container }}

    env:
      COMPILER_VERSION: ${{ matrix.version }}
      FFLAGS: ${{ matrix.FFLAGS }}
      PREFIX: install
      GASNET_CONFIGURE_ARGS: --enable-rpath --enable-debug
      GASNET_SPAWN_VERBOSE: 1
      GASNET_SPAWNFN: L
      GASNET_MASTERIP: 127.0.0.1
      CAF_IMAGES: 8

    steps:
    - name: Set gfortran variables
      if: matrix.compiler == 'gfortran'
      run: |
        set -x
        echo "FC=gfortran-${COMPILER_VERSION}" >> "$GITHUB_ENV"
        echo "CC=gcc-${COMPILER_VERSION}" >> "$GITHUB_ENV"
        echo "CXX=g++-${COMPILER_VERSION}" >> "$GITHUB_ENV"

    - name: Set flang variables
      if: matrix.compiler == 'flang'
      run: |
        set -x
        echo "FC=flang-new" >> "$GITHUB_ENV" 
        echo "CC=clang" >> "$GITHUB_ENV"
        echo "CXX=clang++" >> "$GITHUB_ENV"

    - name: Set Caffeine variables
      run: |
        set -x
        # docker instances cannot handle high levels of subjob parallelism
        if test -n "${{ matrix.container }}"; then \
          echo "SUBJOB_PREFIX=CAF_IMAGES=2" >> "$GITHUB_ENV" ; \
        fi
        # disable shared-memory bypass with network=udp to simulate multi-node runs
        if test "${{ matrix.network }}" = "udp"; then \
          echo "GASNET_SUPERNODE_MAXSIZE=1" >> "$GITHUB_ENV" ; \
        fi
        if (( ${{ matrix.native_multi_image }} )); then \
          echo "FFLAGS=$FFLAGS -DHAVE_MULTI_IMAGE" >> "$GITHUB_ENV" ; \
        fi


    - name: Checkout code
      uses: actions/checkout@v1

    - name: Install Ubuntu Native Dependencies
      if: ${{ contains(matrix.os, 'ubuntu') && matrix.container == '' }}
      run: |
        set -x
        sudo apt update
        sudo apt install -y build-essential gfortran-${COMPILER_VERSION} g++-${COMPILER_VERSION} pkg-config make

    - name: Install Ubuntu Container Dependencies
      if: ${{ contains(matrix.os, 'ubuntu') && matrix.container != '' && !contains(matrix.container, 'phhargrove') }}
      run: |
        set -x
        apt update
        apt install -y build-essential pkg-config make git curl

    - name: Install macOS Dependencies
      if: contains(matrix.os, 'macos') && matrix.compiler == 'flang'
      run: |
        set -x
        brew update
        brew install llvm@${COMPILER_VERSION} flang
        # workaround issue #228: clang cannot find homebrew flang's C header
        for p in /opt/homebrew /usr/local $(brew --prefix) ; do find $p/Cellar/flang -name ISO_Fortran_binding.h 2>/dev/null || true ; done
        echo "CFLAGS=-I$(dirname $(find $(brew --prefix)/Cellar/flang -name ISO_Fortran_binding.h | head -1)) ${CFLAGS}" >> "$GITHUB_ENV"
        # Prepend homebrew clang to PATH:
        echo "PATH=$(brew --prefix)/opt/llvm/bin:${PATH}" >> "$GITHUB_ENV"

    - name: Setup FPM
      uses: fortran-lang/setup-fpm@main
      if: ${{ !contains(matrix.os, 'macos') || matrix.os == 'macos-13' }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        fpm-version: latest

    - name: Build FPM
      # no macos-arm64 fpm distro, build from source
      if: ${{ contains(matrix.os, 'macos') && matrix.os != 'macos-13' }} 
      run: |
        set -x
        export FPM_VERSION=0.12.0
        curl --retry 5 -LOsS https://github.com/fortran-lang/fpm/releases/download/v$FPM_VERSION/fpm-$FPM_VERSION.F90
        mkdir fpm-temp
        gfortran-14 -o fpm-temp/fpm fpm-$FPM_VERSION.F90
        echo "PATH=${PWD}/fpm-temp:${PATH}" >> "$GITHUB_ENV"

    - name: Version info
      run: |
        echo == TOOL VERSIONS ==
        (set -x ; uname -a )
        if test -r /etc/os-release ; then (set -x ; cat /etc/os-release ) ; fi
        for tool in ${FC} ${CC} ${CXX} fpm ; do
          ( set -x ; w=$(which $tool) ; ls -al $w ; ls -alhL $w ; $tool --version )
        done

    - name: Build Caffeine (install.sh)
      run: |
        for var in FC CC CXX FFLAGS CPPFLAGS CFLAGS LDFLAGS LIBS GASNET_CONFIGURE_ARGS ; do \
            eval echo "$var=\$$var"; done
        set -x
        ./install.sh --prefix=${PREFIX} --network=${{ matrix.network }} --verbose

    - name: Run examples
      run: |
        echo CAF_IMAGES=${CAF_IMAGES}
        set -x
        ./build/run-fpm.sh run --verbose --example hello

    - name: Run native multi-image test
      if: ${{ matrix.native_multi_image }}
      run: |
        set -x ; ./build/run-fpm.sh run --verbose

    - name: Run unit tests
      run: |
        echo SUBJOB_PREFIX=${SUBJOB_PREFIX}
        while (( CAF_IMAGES > 0 )); do \
          echo CAF_IMAGES=${CAF_IMAGES} ; \
          ( set -x ; ./build/run-fpm.sh test --verbose -- -d ) ; \
          sleep 1 ; \
          CAF_IMAGES=$(( CAF_IMAGES / 2 )) ; \
        done

    - name: Run exit tests
      run: |
        echo CAF_IMAGES=${CAF_IMAGES}
        set -x
        ./build/run-fpm.sh run --verbose --example stop_with_no_code
        ( set +e ; ./build/run-fpm.sh run --verbose --example stop_with_integer_code ; test $? = 99 )
        ( set +e ; ./build/run-fpm.sh run --verbose --example error_stop_with_integer_code ; test $? = 100 )
        unset GASNET_SPAWN_VERBOSE
        for ((i=1; i<=4; i++)); do \
         (set +e ; \
          ./build/run-fpm.sh run --verbose --example exit_case -- $i 2>&1 | tee output ; \
          test ${PIPESTATUS[0]} = $((i + 100)) \
            && grep -q "stdout from image $CAF_IMAGES" output \
            && grep -q "stderr from image $CAF_IMAGES" output \
         ) ; \
        done

