name: Build

on: [push, pull_request]

jobs:
  build:
    name: ${{ matrix.compiler }}-${{ matrix.version }} (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-13, macos-14, macos-15, ubuntu-24.04]
        compiler: [ gfortran ]
        version: [ 13, 14 ]
        CC: [ gcc ]
        CXX: [ g++ ]
        exclude:
          - os: macos-15 # gcc-13 broken on macos-15
            version: 13
        include:
          - os: ubuntu-24.04
            compiler: flang
            version: 20
            CC: clang
            CXX: clang++
            # https://hub.docker.com/r/phhargrove/llvm-flang/tags
            container: phhargrove/llvm-flang:20.1.0-1
            SUBJOB_PREFIX: GASNET_PSHM_NODES=2
          - os: ubuntu-24.04
            compiler: flang
            version: 19
            CC: clang
            CXX: clang++
            FFLAGS: -mmlir -allow-assumed-rank
            # https://hub.docker.com/r/phhargrove/llvm-flang/tags
            container: phhargrove/llvm-flang:19.1.1-1
            SUBJOB_PREFIX: GASNET_PSHM_NODES=2
#          - os: ubuntu-24.04
#            compiler: flang
#            version: new
#            CC: clang
#            CXX: clang++
#            container: gmao/llvm-flang:latest
#            SUBJOB_PREFIX: GASNET_PSHM_NODES=2

    container:
      image: ${{ matrix.container }}

    env:
      GCC_VERSION: ${{ matrix.version }}
      FC: ${{ matrix.compiler }}
      CC: ${{ matrix.CC }}
      CXX: ${{ matrix.CXX }}
      FFLAGS: ${{ matrix.FFLAGS }}
      PREFIX: install
      GASNET_CONFIGURE_ARGS: --enable-rpath --enable-debug
      GASNET_PSHM_NODES: 8
      SUBJOB_PREFIX: ${{ matrix.SUBJOB_PREFIX }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v1

    - name: Install Ubuntu Native Dependencies
      if: ${{ contains(matrix.os, 'ubuntu') && matrix.container == '' }}
      run: |
        set -x
        sudo apt update
        sudo apt install -y build-essential gfortran-${GCC_VERSION} g++-${GCC_VERSION} pkg-config make

    - name: Install Ubuntu Container Dependencies
      if: ${{ contains(matrix.os, 'ubuntu') && contains(matrix.container, 'gmao') }}
      run: |
        set -x
        apt update
        apt install -y build-essential pkg-config make

    - name: Install macOS Dependencies
      if: contains(matrix.os, 'macos') && 0
      run: |
        set -x

    - name: Setup Compilers
      run: |
        set -x
        if test "$FC" = "flang" ; then \
          echo "FC=flang-new" >> "$GITHUB_ENV" ; \
        else \
          echo "FC=gfortran-${GCC_VERSION}" >> "$GITHUB_ENV" ; \
        fi
        if test "$CC" = "gcc" ; then echo "CC=gcc-${GCC_VERSION}" >> "$GITHUB_ENV" ; fi
        if test "$CXX" = "g++" ; then echo "CXX=g++-${GCC_VERSION}" >> "$GITHUB_ENV" ; fi

    - name: Setup FPM
      uses: fortran-lang/setup-fpm@main
      if: ${{ !contains(matrix.os, 'macos') || matrix.os == 'macos-13' }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}

    - name: Build FPM
      # no macos-arm64 fpm distro, build from source
      if: ${{ contains(matrix.os, 'macos') && matrix.os != 'macos-13' }} 
      run: |
        set -x
        curl --retry 5 -LOsS https://github.com/fortran-lang/fpm/releases/download/v0.11.0/fpm-0.11.0.F90
        mkdir fpm-temp
        gfortran-14 -o fpm-temp/fpm fpm-0.11.0.F90
        echo "PATH=${PWD}/fpm-temp:${PATH}" >> "$GITHUB_ENV"

    - name: Version info
      run: |
        echo == TOOL VERSIONS ==
        set -x
        uname -a
        if test -r /etc/os-release ; then cat /etc/os-release ; fi
        ${FC} --version
        ${CC} --version
        ${CXX} --version
        fpm --version

    - name: Build Caffeine (install.sh)
      run: |
        for var in FC CC CXX FFLAGS CPPFLAGS CFLAGS LDFLAGS LIBS GASNET_CONFIGURE_ARGS ; do \
            eval echo "$var=\$$var"; done
        set -x
        ./install.sh --prefix=${PREFIX} --verbose

    - name: Run examples
      run: |
        echo GASNET_PSHM_NODES=${GASNET_PSHM_NODES}
        set -x
        ./build/run-fpm.sh run --verbose --example hello
        ./build/run-fpm.sh run --verbose --example stop_with_no_code
        ( set +e ; ./build/run-fpm.sh run --verbose --example stop_with_integer_code ; test $? = 99 )
        ( set +e ; ./build/run-fpm.sh run --verbose --example error_stop_with_integer_code ; test $? = 100 )

    - name: Run unit tests
      run: |
        echo GASNET_PSHM_NODES=${GASNET_PSHM_NODES}
        echo SUBJOB_PREFIX=${SUBJOB_PREFIX}
        set -x
        ./build/run-fpm.sh test --verbose -- -d

